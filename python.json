{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"HEADER": {
		"prefix": "liuzhuang",
		"body": [
			"#!/usr/bin/env python",
			"# -*- encoding: utf-8 -*-",
			"'''",
			"@File    :   $TM_FILENAME",
			"@Time    :   $CURRENT_YEAR/$CURRENT_MONTH/$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
			"@Author  :   Rao Guangxiang ",
			"@Version :   1.0",
			"@Contact :   liuzhuang@88.com",
			"@Desc    :   ${1:description}",
			"'''",
			"$0"
		],
	},
	"torch":{
		"prefix": "torch",
		"body": [
			"import torch",
			"from torch import nn",
			"from torch.nn import functional as F",
			"from torchvision.transforms import transforms",
			"from torch.utils.data import Dataset, DataLoader, DistributedSampler",
			"import torch.distributed as dist",
			"from torch.nn.parallel import DistributedDataParallel as DDP",
			"import torch.optim as optim",
			"",
			"from einops import rearrange, reduce",
			"from pathlib import Path",
			"from natsort import natsorted",
			"from PIL import Image",
			"import numpy as np",
			"import math",
			"import cv2",
			"import pandas as pd",
			"from IPython import embed",
			"",
			"import time",
			"import os",
			"",
			"from tensorboardX import SummaryWriter",
			"",
			"$0",
		],
	},
	"seed":{
		"prefix": "seed",
		"body": [
			"import random",
			"import numpy as np",
			"import torch",
			"random.seed(1024)",
			"np.random.seed(1024)",
			"torch.manual_seed(1024)",
			"torch.cuda.manual_seed_all(1024)",
			"torch.backends.cudnn.deterministic = True",
			"torch.backends.cudnn.benchmark = False",
			""
		]
	}
}